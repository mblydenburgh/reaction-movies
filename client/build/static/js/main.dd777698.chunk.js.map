{"version":3,"sources":["components/Nav/index.js","components/MovieList/Movie/index.js","components/Jumbotron/index.js","components/MovieList/index.js","utils/keys.js","utils/api.js","components/MovieList/MovieDetail/index.js","components/Search/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","NavDiv","NavBrand","NavLink","href","Styled","nav","_templateObject","span","_templateObject2","_templateObject3","Movie","_ref","movie","MovieCard","Link","to","concat","id","Overdrive_min_default","MoviePoster","src","poster_path","alt","title","div","Movie_templateObject","img","Movie_templateObject2","Jumbotron","subtitle","JumboDiv","Jumbotron_templateObject","MovieList","movies","landingPage","components_Jumbotron","List","map","MovieList_Movie","key","renderMovies","MovieList_templateObject","require","config","console","log","TMDB_SECRET","API","fetchMostRecent","_fetchMostRecent","Object","asyncToGenerator","regenerator_default","mark","_callee","url","response","results","wrap","_context","prev","next","fetch","headers","Content-Type","sent","json","abrupt","t0","stop","this","apply","arguments","fetchMovie","_fetchMovie","_callee2","_context2","method","_x","searchForMovie","_searchForMovie","_callee3","query","encodedQuery","_ref2","_context3","replace","_x2","MovieDetail","state","saved","handleClick","body","mode","window","location","pathname","split","setState","_this2","MovieDiv","backdrop","backdrop_path","MovieInfo","String","release_date","onClick","overview","Component","MovieDetail_templateObject","MovieDetail_templateObject2","Search","handleChange","name","event","_this","target","value","SearchDiv","index_es","label","onChange","variant","length","components_MovieList","Search_templateObject","App","recentMovies","Main","components_Nav","BrowserRouter","Switch","Route","exact","path","component","components_Search","MovieList_MovieDetail","App_templateObject","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd777698.chunk.js","sourcesContent":["import React from 'react';\nimport Styled from 'styled-components'\n\nconst Nav = props => {\n    return (\n        <NavDiv>\n            <NavBrand><NavLink href=\"/\">React(ion) Movies</NavLink></NavBrand>\n            <NavLink href=\"/search\">Search</NavLink>\n            <NavLink href=\"/saved\">Saved</NavLink>\n        </NavDiv>\n    )\n}\n\nexport default Nav;\n\nconst NavDiv = Styled.nav`\n    min-width: 100%\n    top: 0;\n    box-shadow: 5px 5px 5px #000;\n    padding: 30px 0px;\n    margin: 1rem;\n`\n\nconst NavBrand = Styled.span`\n    font-size: 1.75rem;\n    padding-right: 1rem;\n`\n\nconst NavLink = Styled.a`\n    margin: 15px;\n    text-decoration:none;\n    color: black;\n`","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Styled from 'styled-components'\nimport Overdrive from 'react-overdrive';\n\nconst Movie = ({movie}) => {\n    const POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\n    return (\n        <MovieCard>\n            <Link to={`/${movie.id}`}>\n                <Overdrive id={movie.id}>\n                    <MoviePoster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n                </Overdrive>\n            </Link>\n        </MovieCard>\n    )\n}\n\nexport default Movie;\n\nconst MovieCard = Styled.div`\n    justify-self: center;\n`;\n\nexport const MoviePoster = Styled.img`\n    box-shadow: 0 0 10px black;\n`","import React from 'react'\nimport Styled from 'styled-components'\n\nconst Jumbotron = ({title,subtitle}) => {\n    return (\n        <JumboDiv>\n            <h1>{title}</h1>\n            <h3>{subtitle}</h3>\n        </JumboDiv>\n    )\n}\n\nexport default Jumbotron;\n\nconst JumboDiv = Styled.div`\n    text-align: center;\n    min-height: 300px;\n    padding: 1.25rem;\n    box-shadow: 5px 5px 15px black;\n    margin: 1rem;\n    display: grid;\n    justify-content: center;\n    align-content: center;\n`","import React from 'react';\nimport Styled from 'styled-components';\nimport Movie from './Movie';\nimport Jumbotron from '../Jumbotron';\n\nconst MovieList = ({movies,landingPage}) => {\n    \n    const renderMovies = movies => movies.map(movie => ( \n            <Movie key={movie.id} movie={movie} />\n    )) \n\n    \n    return (\n        <div>\n            {landingPage?<Jumbotron title={\"React(ion) Movies\"} subtitle={\"Powered by The Movie Database\"} />:null} \n            <List>\n                {renderMovies(movies)} \n            </List>\n        </div>\n    )\n}\n\nexport default MovieList;\n\nconst List = Styled.div`\n    display: grid;\n    grid-template-columns: repeat(5,1fr);\n    padding: 1rem;\n    justify-content: center;\n    grid-gap: 20px;\n`","require('dotenv').config()\n// const TMDB_SECRET = process.env.TMDB_SECRET;\nconst TMDB_SECRET = '93797cb3d24625d93231534965af4f4d';\nconsole.log(TMDB_SECRET);\n\nexport default TMDB_SECRET;","import TMDB_SECRET from './keys';\n\nconst API = {\n    //* This function fetchs a small bit of info on recent popular movies\n    async fetchMostRecent(){\n        console.log(`fetching most recent movies`);\n        const url = `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_SECRET}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`\n        try{\n            const response = await fetch(url,{\n                headers:{\n                    \"Content-Type\":\"application/json\",\n                }\n            })\n            const {results} = await response.json()\n            console.log(results);\n            return results;\n        }\n        catch(error){\n            console.log(error);\n        }\n    },\n\n    //* This function fetchs more data on an individual movie\n    async fetchMovie(id){\n        const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${TMDB_SECRET}`;\n        try{\n            const response = await fetch(url,{\n                method:\"GET\",\n                headers:{\n                    \"Content-Type\":\"application/json\",\n                }\n            });\n            const results = await response.json();\n            console.log(results);\n            return results;\n        }\n        catch(error){\n            console.log(error);\n        }\n    },\n\n    async searchForMovie(query){\n        const encodedQuery = query.replace(' ','+');\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_SECRET}&query=${encodedQuery}`\n        try{\n            const response = await fetch(url,{\n                method:\"GET\",\n                headers:{\n                    \"Content-Type\":\"application/json\"\n                }\n            });\n            const {results} = await response.json();\n            return results;\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n\n}\n\nexport default API;","import React, { Component } from 'react';\nimport Styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport Overdrive from 'react-overdrive';\nimport { MoviePoster } from '../Movie';\nimport API from '../../../utils/api';\n\nclass MovieDetail extends Component{\n    state = {\n        movies:[],\n        movie:{},\n        saved:false,\n    }\n\n    async componentDidMount(){\n        const id = window.location.pathname.split(\"/\")[1]\n        const movie = await API.fetchMovie(id);\n        this.setState({movie:movie});\n    }\n\n    handleClick = async (movie) => {\n        console.log(`handling click`);\n        console.log(movie);\n        const response = await fetch('https://localhost:3000/save',{\n            method:'POST',\n            body:{\n                movie:movie\n            },\n            mode:\"no-cors\"\n        });\n        console.log(response);\n    }\n    \n    \n    render(){\n        const POSTER_PATH = \"http://image.tmdb.org/t/p/w154\";\n        const BACKDROP_PATH = \"http://image.tmdb.org/t/p/original\";\n        const {movie} = this.state;\n\n        return (\n            <MovieDiv backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`}>\n                <MovieInfo>\n                    <Overdrive id={String(movie.id)}>\n                        <MoviePoster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n                    </Overdrive>\n                    <div>\n                        <h1>{movie.title}</h1>\n                        <h3>{movie.release_date}</h3>\n                        <button onClick={()=>this.handleClick(movie)}>Save</button>\n                        <p>{movie.overview}</p>\n                    </div>\n                </MovieInfo>\n            </MovieDiv>\n        )\n    }\n}\n\nexport default MovieDetail;\n\nconst MovieDiv = Styled.div`\n    position:relative;\n    padding-top:50vh;\n    background-size:cover;\n    background:url(${props => props.backdrop}) center no-repeat;\n`\n\nconst MovieInfo = Styled.div`\n    background:white;\n    text-align:left;\n    padding:2rem 10%;\n    display:flex;\n    > div\n        {\n            margin-left:20px;\n        }\n    img\n        {\n            position:relative;\n            top:5px;\n        }\n`","import React, { Component } from 'react';\nimport { TextField, Button } from '@material-ui/core';\nimport Styled from 'styled-components';\nimport API from '../../utils/api';\nimport MovieList from '../MovieList';\n\nclass Search extends Component{\n    state={\n        title:'',\n        movies:[]\n    }\n    \n\n    //! why does function have to be written like this and not...\n    //! handleChange = (name,event) => {}?\n    handleChange = name => event => {\n        this.setState({title:event.target.value})\n    }\n\n    handleClick = async () => {\n        const movies = await API.searchForMovie(this.state.title);\n        this.setState({movies:movies});\n    }\n\n    render(){\n        return(\n            <div>\n                <SearchDiv>\n                    <h3>Search for a Movie</h3>\n                    <TextField \n                    id='movie-seach-input'\n                    label='Title Search'\n                    onChange={this.handleChange('title')} />\n                    <Button \n                    variant='contained'\n                    onClick={this.handleClick}>\n                        Search\n                    </Button>\n                </SearchDiv>\n                {(this.state.movies.length>0)?<MovieList movies={this.state.movies} landingPage={false} />:null}\n            </div>\n        )\n    }\n}\n\nexport default Search;\n\nconst SearchDiv = Styled.div`\n    text-align:center;\n`\n\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Styled from 'styled-components';\nimport Nav from './components/Nav';\nimport MovieList from './components/MovieList';\nimport MovieDetail from './components/MovieList/MovieDetail';\nimport Search from './components/Search'\nimport API from './utils/api';\n\nclass App extends Component {\n  state = {\n    \"movies\": [],\n  }\n\n  async componentDidMount(){\n    const recentMovies = await API.fetchMostRecent();\n    console.log(recentMovies);\n    this.setState({movies:recentMovies})\n  }\n\n  //! Why does the search compoent not render when placed below the movie detail component?\n  render() {\n    return (\n      <Main>\n        <Nav />\n        <Router>\n          <div>\n            <Switch>\n              <Route exact path='/' component={() => <MovieList movies={this.state.movies} landingPage={true} />} />\n              <Route exact path='/search' component={() => <Search />} />\n              <Route exact path='/:id' component={() => <MovieDetail />} />\n              {/* <Route exact path='/saved' component={} /> */}\n            </Switch>\n          </div>\n        </Router>\n      </Main>\n    );\n  }\n}\n\nexport default App;\n\nconst Main = Styled.div`\n  margin: 1.5rem;\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}